<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd
                        http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">

    <context:property-placeholder location="classpath:cas.properties" />
    <!-- 缓存管理器 使用Ehcache实现 -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml" />
    </bean>

    <!-- 凭证匹配器 -->
    <bean id="credentialsMatcher" class="cn.edu.nwsuaf.matcher.RetryLimitHashedCredentialsMatcher">
        <!--<constructor-arg ref="cacheManager" />-->
        <!--<property name="passwordRetryCache" value="passwordRetryCache"/>-->
        <property name="hashAlgorithmName" value="md5" />
        <property name="hashIterations" value="2" />
        <property name="storedCredentialsHexEncoded" value="true" />
    </bean>

    <!-- Realm实现 -->
    <bean id="userRealm" class="cn.edu.nwsuaf.realm.UserRealm">
        <property name="passwordRetryCache" value="passwordRetryCache" />
        <property name="credentialsMatcher" ref="credentialsMatcher" />
    </bean>

    <bean id="casRealm" class="org.apache.shiro.cas.CasRealm">
        <property name="defaultRoles" value="ROLE_USER"/>
        <property name="cachingEnabled" value="true"/>
        <property name="authenticationCachingEnabled" value="true"/>
        <property name="authenticationCacheName" value="authenticationCache"/>
        <property name="authorizationCachingEnabled" value="true"/>
        <property name="authorizationCacheName" value="authorizationCache"/>
        <property name="casServerUrlPrefix" value="${cas.casServerUrlPrefix}"/>
        <!--客户端的回调地址设置，必须和上面的shiro-cas过滤器拦截的地址一致 -->
        <property name="casService" value="${cas.casService}"/>
    </bean>
    <!-- 安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realms">
            <list>
                <ref bean="userRealm" />
                <ref bean="casRealm" />
            </list>
        </property>
        <!--<property name="realm" ref="casRealm" />-->
        <property ref="cacheManager" name="cacheManager"/>
    </bean>
    <bean class="cn.edu.nwsuaf.filter.MyCasFilter" id="casFilter">
        <!--配置验证错误时的失败页面（Ticket 校验不通过时展示的错误页面） -->
        <property name="successUrl" value="/authc/anyuser"/>
        <property name="failureUrl" value="${cas.loginUrl}"/>
    </bean>

    <!-- Shiro的Web过滤器 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager" />
        <property name="loginUrl" value="${cas.loginUrl}" />
        <!--<property name="unauthorizedUrl" value="/index" />-->
        <property name="filters">
            <map>
                <entry key="cas" value-ref="casFilter" />
            </map>
        </property>
        <property name="filterChainDefinitions">
            <value>
                /authc/admin = roles[admin]
                /login = cas
                /** = authc
            </value>
        </property>
        <!--
            cas验证成功跳转路径不能包含有需要cas认证路径中
            如：/authc/**是需要cas认证的路径
               /authc/success是成功后的跳转路径，
               这是不行的，因为一开始/authc/**进行认证，认证成功后，发现 /authc/success也需要认证，
               于是会重新对/authc/success进行认证，然后又成功后，接下发现/authc/success又需要认证。
               就产生了循环重定向了。
        -->
    </bean>


    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
</beans>